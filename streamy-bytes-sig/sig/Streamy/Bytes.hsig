{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE RankNTypes #-}
signature Streamy.Bytes where

import Streamy (Stream)

import Prelude (Functor,Applicative,Foldable,Enum,Eq,Integral,Num,Ord,Read,Real,Show,Bool)
import Data.Ix (Ix)
import Control.Monad (Monad)
import Control.Monad.Trans.Class (MonadTrans)
import Control.Monad.IO.Class (MonadIO)
import Control.Monad.Morph (MFunctor)
import System.IO (Handle)

data SingleByte :: *

data Bytes :: *

data ByteStream :: (* -> *) -> * -> *

instance Monad m => Functor (ByteStream m)
instance Monad m => Applicative (ByteStream m)
instance Monad m => Monad (ByteStream m)
instance MonadIO m => MonadIO (ByteStream m) 
instance MonadTrans ByteStream
instance MFunctor ByteStream 

data ByteIndex :: *

instance Enum ByteIndex
instance Eq ByteIndex
instance Integral ByteIndex
instance Num ByteIndex
instance Ord ByteIndex
instance Read ByteIndex
instance Real ByteIndex
instance Show ByteIndex
instance Ix ByteIndex

empty :: Monad m => ByteStream m ()

singleton :: Monad m => SingleByte -> ByteStream m ()

pack :: Monad m => Stream SingleByte m r -> ByteStream m r

unpack :: Monad m => ByteStream m r -> Stream SingleByte m r

fromChunks :: Monad m => Stream Bytes m r -> ByteStream m r

toChunks :: Monad m => ByteStream m r -> Stream Bytes m r

fromStrict :: Monad m => Bytes -> ByteStream m ()

toStrict :: Monad m => ByteStream m r -> m (Bytes,r)

toStrict_ :: Monad m => ByteStream m () -> m Bytes

--

splitAt :: Monad m => ByteIndex -> ByteStream m r -> ByteStream m (ByteStream m r)

take :: Monad m => ByteIndex -> ByteStream m r -> ByteStream m ()

--

fromHandle :: MonadIO m => Handle -> ByteStream m ()

toHandle :: MonadIO m => Handle -> ByteStream m r -> m r

