{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE RankNTypes #-}
signature Streamy.Group where

import Streamy (Stream)

import Prelude (Functor,Applicative,Foldable,Eq,Int,Bool)
import Control.Monad (Monad)
import Control.Monad.Trans.Class (MonadTrans)
import Control.Monad.IO.Class (MonadIO)

data Groups :: * -> (* -> *) -> * -> *

instance Monad m => Functor (Groups o m)
instance Monad m => Applicative (Groups o m)
instance Monad m => Monad (Groups o m)
instance MonadIO m => MonadIO (Groups o m) 
instance MonadTrans (Groups o)

group :: (Monad m, Eq a) => Stream a m r -> Groups a m r

maps :: Monad m => (forall x. Stream a m x -> Stream b m x) -> Groups a m r -> Groups b m r

concats :: Groups a m r -> Stream a m r
