{-# LANGUAGE KindSignatures #-}
signature Streamy where

import Prelude (Functor,Applicative,Foldable,Int,Bool)
import Control.Monad (Monad)
import Control.Monad.Trans.Class (MonadTrans)
import Control.Monad.IO.Class (MonadIO)
import Control.Monad.Morph (MFunctor)

data Stream :: * -> (* -> *) -> * -> *

instance Monad m => Functor (Stream o m)
instance Monad m => Applicative (Stream o m)
instance Monad m => Monad (Stream o m)
instance MonadIO m => MonadIO (Stream o m) 
instance MonadTrans (Stream o)
instance MFunctor (Stream o) 

yield :: Monad m => o -> Stream o m ()

each :: (Monad m, Foldable f) => f a -> Stream a m ()

toList :: Monad m => Stream a m r -> m ([a],r)

toList_ :: Monad m => Stream a m () -> m [a]

chain :: Monad m => (o -> m ()) -> Stream o m r -> Stream o m r

effects :: Monad m => Stream o m r -> m r

concat :: (Monad m, Foldable f) => Stream (f a) m r -> Stream a m r

for :: Monad m => Stream a m r -> (a -> Stream b m ()) -> Stream b m r

repeat :: Monad m => a -> Stream a m r

repeatM :: Monad m => m a -> Stream a m r

take :: Monad m => Int -> Stream o m r -> Stream o m () 

takeWhile :: Monad m => (a -> Bool) -> Stream a m r -> Stream a m ()

map :: Monad m => (a -> b) -> Stream a m r -> Stream b m r 

mapM :: Monad m => (a -> m b) -> Stream a m r -> Stream b m r

mapM_ :: Monad m => (a -> m b) -> Stream a m r -> m r

drop :: Monad m => Int -> Stream a m r -> Stream a m r

dropWhile :: Monad m => (a -> Bool) -> Stream a m r -> Stream a m r

filter :: Monad m => (a -> Bool) -> Stream a m r -> Stream a m r

filterM :: Monad m => (a -> m Bool) -> Stream a m r -> Stream a m r

replicate :: Monad m => Int -> a -> Stream a m ()

replicateM :: Monad m => Int -> m a -> Stream a m ()

all_ :: Monad m => (a -> Bool) -> Stream a m () -> m Bool

any_ :: Monad m => (a -> Bool) -> Stream a m () -> m Bool

fold :: Monad m => (x -> a -> x) -> x -> (x -> b) -> Stream a m r -> m (b,r)
fold_ :: Monad m => (x -> a -> x) -> x -> (x -> b) -> Stream a m () -> m b
foldM :: Monad m => (x -> a -> m x) -> m x -> (x -> m b) -> Stream a m r -> m (b,r)
foldM_ :: Monad m => (x -> a -> m x) -> m x -> (x -> m b) -> Stream a m () -> m b

scan :: Monad m => (x -> a -> x) -> x -> (x -> b) -> Stream a m r -> Stream b m r
scanM :: Monad m => (x -> a -> m x) -> m x -> (x -> m b) -> Stream a m r -> Stream b m r


