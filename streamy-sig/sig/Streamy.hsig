{-# LANGUAGE KindSignatures #-}
signature Streamy where

import Prelude (Functor,Applicative,Foldable,Int)
import Control.Monad (Monad)
import Control.Monad.Trans.Class (MonadTrans)
import Control.Monad.IO.Class (MonadIO)
import Control.Monad.Morph (MFunctor)

data Stream :: * -> (* -> *) -> * -> *

instance Monad m => Functor (Stream o m)
instance Monad m => Applicative (Stream o m)
instance Monad m => Monad (Stream o m)
instance MonadIO m => MonadIO (Stream o m) 
instance MonadTrans (Stream o)
instance MFunctor (Stream o) 

yield :: Monad m => o -> Stream o m ()

each :: (Monad m, Foldable f) => f a -> Stream a m ()

toList :: Monad m => Stream a m r -> m ([a],r)

toList_ :: Monad m => Stream a m () -> m [a]

chain :: Monad m => (o -> m ()) -> Stream o m r -> Stream o m r

effects :: Monad m => Stream o m r -> m r

concat :: (Monad m, Foldable f) => Stream (f a) m r -> Stream a m r

for :: Monad m => Stream a m r -> (a -> Stream b m ()) -> Stream b m r

repeat :: Monad m => a -> Stream a m r

repeatM :: Monad m => m a -> Stream a m r

take :: Monad m => Int -> Stream o m r -> Stream o m () 

