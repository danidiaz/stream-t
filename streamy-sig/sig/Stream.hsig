{-# LANGUAGE KindSignatures #-}
signature Streamy where

import Control.Monad
import Control.Monad.Trans.Class
import Control.Monad.IO.Class
import Control.Monad.Morph

data Stream :: * -> (* -> *) -> * -> *

instance Monad m => Monad (Stream o m)
instance MonadIO => MonadIO (Stream o m) 
instance MonadTrans (Stream o)
instance MFunctor (Stream o) 

yield :: Monad m => o -> Stream o m ()

chain :: Monad m => (a -> m ()) -> Stream o m r -> Stream o m r

-- TODO: effects, toList, toList_

